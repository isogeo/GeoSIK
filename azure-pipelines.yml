# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

# CONDITIONS WHICH TRIGGER OR NOT THE JOBS
trigger:
  batch: true
  branches:
    include:
    - master
  tags:
    include:
    - "*"

pr:
- master

### GLOBAL VARIABLES ###

variables:

  ## ARTIFACTS CONFIGURATION ##
  nuGetsArtifactName: 'GeoSikNuGets'
  buildArtifactName : 'GeoSikBuild'
  #!Dont change it <-begin->
  artifactBuildPath: $(artifactDirLocation)\$(buildArtifactName)
  artifactNuGetPath: $(artifactDirLocation)\$(nuGetsArtifactName)
  #!Dont change it <-end->
  buildIgnoredFiles: "*.aspx`robj/`r*.xml`r*.xsd`r*.csv`r*.pdb`r*.metadata`r*.p7s`r*.targets`r*.props`r*.json`r*.cache`r*.XML`r*.config`r.git`r*.nuget/`r.gitignore`r*.sln`r*.cs`r*.yml`r*.bat`r*.proj`r*.md`r*.txt`r*.nuspec`r*.snk`r*.resx`r"

  ## PUSH ##
  nuGetSource: https://api.nuget.org/v3/index.json

  ## GENERAL CONFIGURATION ##
  solutionDir: $(System.DefaultWorkingDirectory)
  solution: 'GeoSik.dev.sln'
  artifactDirLocation: $(System.DefaultWorkingDirectory)
 
  ## BUILD CONFIGURATION ##
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  # Try other NuGet versions (5.3.1; 5.0.0; 4.9.1; not working) try it in the future with a new version
  nugetVersion:  4.7.1
  msBuildArchitecture: x64
  vsVersion: '16.0'
  vsTestVersion: $(vsVersion)
  vmImage: 'windows-2019'

  ## NUGET GENERATION ##
  includeNuGetGeneration: '$(artifactBuildPath)\**\*.csproj'
  excludeNuGetGeneration: '!$(artifactBuildPath)\**\*.Tests.csproj;!$(artifactBuildPath)\**\Data.Entity.csproj;!$(artifactBuildPath)\**\WebSample.csproj'

  ## NUGET PACKAGES PUBLISH ##
  nuGetPackagePatternToPublish: $(artifactPath)/**/*.nupkg
  # excludeNuGetPackages not used in current publish script, need to wait MAJ publish task Azure Devops, see "Publish" job for details
  excludeNuGetPackages: '!$(artifactPath)\**\Data.Entity.*.nupkg;!$(artifactPath)\**\WebSample.*.nupkg'
  # nuGetFeedCredentials not used yet, because publish task doesn't support allowPackageConflicts flag for publishing on nuget.org yet, see "Publish" job
  nuGetFeedCredentials: 'NugetOrg_asIsogeo'

  ## TESTS EXECUTION ##
  includeTest: '**\*Tests.dll'
  excludeTest: '!**\*TestAdapter*.dll'


stages:

- stage: Build
  jobs:

  ## BUILD SOLUTION
  - job: 'BuildSolution'
    pool:
        vmImage: $(vmImage)
    continueOnError: false
    variables:
      artifactName: $(buildArtifactName)
    steps:
    
      - task: NuGetToolInstaller@1
        displayName: "Installation NuGet Configuration"
        inputs:
          versionSpec: $(nugetVersion)

      - task: NuGetCommand@2
        displayName: 'Restore NuGet packages'
        inputs:
          restoreSolution: $(solutionDir)/$(solution)
          configuration: $(buildConfiguration)

      - task: VSBuild@1
        displayName: 'Compilation GeoSik solution'
        inputs:
          solution: $(solutionDir)/$(solution)
          vsVersion: $(vsVersion)
          msbuildArchitecture: $(msBuildArchitecture)
          msbuildArgs: '/p:PackageAsSingleFile=false /p:SkipInvalidConfigurations=true'
          platform: $(buildPlatform)
          configuration: $(buildConfiguration)

      - powershell: | 
          cd $(solutionDir); 
          if ($?){echo $(buildIgnoredFiles) > .artifactignore}; 
          if ($?){Get-Content .artifactignore} 
          else{echo "error generation artifactignore file"; exit 1}
        displayName: 'Add .artifactignore file'

      - task: PublishPipelineArtifact@1
        displayName: 'Storage compilation files'
        inputs:
          artifact: $(artifactName)
          path: $(System.DefaultWorkingDirectory)

  ## GENERATE NUGETS
  - job: 'GenerateNuGets'
    pool:
      vmImage: $(vmImage)
    dependsOn: 'BuildSolution'
    continueOnError: false
    variables:
      artifactPath: $(artifactNuGetPath)
      artifactName: $(nuGetsArtifactName)
    steps:

    # no need for source code
    - checkout: none

    - task: NuGetToolInstaller@1
      displayName: "Installation NuGet Configuration"
      inputs:
        versionSpec: $(nugetVersion)

    - powershell: new-item -ItemType directory -Force -Path $(artifactBuildPath)
      displayName: 'Create artifact folder'

    - task: DownloadPipelineArtifact@2
      displayName: Recover Build packages Artifact
      inputs:
        buildType: 'current'
        artifactName: $(buildArtifactName)
        targetPath: $(artifactBuildPath)

    #- powershell: tree /F
    #  displayName: 'Display Environment - DEBUG'

    - powershell: new-item -ItemType directory -Force -Path $(artifactPath)
      displayName: 'Create artifact folder'

    - task: NuGetCommand@2
      displayName: 'Generation NuGet packages'
      inputs:
        command: 'pack'
        configuration: $(buildConfiguration)
        packagesToPack: '$(includeNuGetGeneration);$(excludeNuGetGeneration)'
        packDestination: $(artifactPath)

    #- powershell: tree /F
    #  displayName: 'Display Environment - DEBUG'

    - task: PublishPipelineArtifact@1
      displayName: 'Storage NuGet artifacts'
      inputs:
        artifact: $(artifactName)
        path: $(artifactPath)

- stage: 'UnitTests'
  jobs:

  ## UNIT TESTS
  - job: 'RunUnitTests'
    pool:
        vmImage: $(vmImage)
    # Can't specify false because currently not 100% succeed tests
    # Reason : problem with results of xunit.visualstudio NuGet Package, defer with MSBuild execution tests
    continueOnError: true
    variables:
      artifactPath: $(artifactBuildPath)
      artifactName: $(buildArtifactName)
    steps:

    # no need for source code
    - checkout: none

    - powershell: new-item -ItemType directory -Force -Path $(artifactPath)
      displayName: 'Create Artifact folder'

    - task: DownloadPipelineArtifact@2
      displayName: Recover Build packages Artifact
      inputs:
        buildType: 'current'
        artifactName: $(artifactName)
        targetPath: $(artifactPath)

    #- powershell: tree /F
    #  displayName: 'Display Environment - DEBUG'

    - task: VSTest@2
      displayName: "Execution unit tests"
      inputs:
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          $(includeTest)
          $(excludeTest)
        searchFolder: $(artifactPath)
        vsTestVersion: $(vsTestVersion)
        configuration: $(buildConfiguration)
        platform: $(buildPlatform)
        codeCoverageEnabled: true

- stage: 'Publish'
  jobs:

    - job: 'PublishNuGets'
      pool:
        vmImage: $(vmImage)
      variables:
        artifactPath: $(artifactNuGetPath)
        artifactName: $(nuGetsArtifactName)
      steps:

      # no need for source code
      - checkout: none

      - task: NuGetToolInstaller@1
        displayName: "Installation NuGet Configuration"
        inputs:
          # need to specify >= 5.1.0 for -SkipDuplicate flag (doesn't exist for external feed currently (nuget.org) with NuGetCommand@2 task)
          # will be add in a future AzureDevops MAJ
          # other parts of the pipeline don't support 5.1.0
          versionSpec: 5.1.0

      - powershell: new-item -ItemType directory -Force -Path $(artifactPath)
        displayName: 'Create artifact folder'

      - task: DownloadPipelineArtifact@2
        displayName: Recover NuGet packages Artifact
        inputs:
          buildType: 'current'
          artifactName: $(artifactName)
          targetPath: $(artifactPath)

      # excludeNuGetPackages isn't supported by "nuget.exe push", need to do a overclomplicated script with a loop etc for doing it
      # -> not necessary currently, so keep it simple
      - script: nuget push $(nuGetPackagePatternToPublish) -Source $(nuGetSource) -ApiKey $(apiKey) -SkipDuplicate -NoSymbols
        displayName: 'Publish NuGet packages to www.nuget.org'

      ## Wait a future MAJ for allowPackageConflicts option, will replace upper script
#      - task: NuGetCommand@2
#        displayName: Publish NuGet packages to www.nuget.org
#        inputs:
#          command: 'push'
#          packagesToPush: $(nuGetPackagePatternToPublish);$(excludeNuGetPackages)
#          nuGetFeedType: 'external'
#          allowPackageConflicts: true
#          publishFeedCredentials: $(nuGetFeedCredentials)

