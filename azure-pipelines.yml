# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

# CONDITIONS WHICH TRIGGER OR NOT THE JOBS
trigger:
  batch: true
  branches:
    include:
    - master
  tags:
    include:
    - "*"

pr:
- master

variables:
  NuGetArtifactName: 'GeoSikNuGetPackages'

stages:
- stage: Deploy
  jobs:

## FIRST JOB ###

    - job: 'GenerateNuGetPackages'
      pool:
        vmImage: 'windows-2019'

      variables:
        SolutionDir: $(System.DefaultWorkingDirectory)
        solution: 'GeoSik.dev.sln'
        buildPlatform: 'Any CPU'
        buildConfiguration: 'Release'
        artifactDirectoryName: 'NuGetFolder'
        artifactDirectoryLocation: $(System.DefaultWorkingDirectory)
        artifactPath: $(artifactDirectoryLocation)\$(artifactDirectoryName)

      steps:

      - task: NuGetToolInstaller@1
        displayName: "Installation NuGet Configuration"

## Not working because problem configuration .Nuget
##  - task: NuGetCommand@2
##    displayName: 'Restore NuGet packages'
##    inputs:
##      restoreSolution: $(solution)
## So, did it with VSBuild

      - task: VSBuild@1
        displayName: 'Restore NuGet packages'
        inputs:
          solution: $(solution)
          vsVersion: latest
          msbuildArchitecture: x64
          msbuildArgs: '-t:restore /p:PackageAsSingleFile=false /p:SkipInvalidConfigurations=true'
          platform: $(buildPlatform)
          configuration: $(buildConfiguration)

      - task: VSBuild@1
        displayName: 'Compilation GeoSik solution'
        inputs:
          solution: $(solution)
          vsVersion: latest
          msbuildArchitecture: x64
          msbuildArgs: '/p:PackageAsSingleFile=false /p:SkipInvalidConfigurations=true'
          platform: $(buildPlatform)
          configuration: $(buildConfiguration)

      - task: NuGetCommand@2
        displayName: 'Generation NuGet packages'
        inputs:
          command: 'pack'
          configuration: $(buildConfiguration)
          packagesToPack: '**\*.csproj;!**\*.Tests.csproj'

      - powershell: cd $(artifactDirectoryLocation); if ($?){new-item -Name $(artifactDirectoryName) -ItemType directory}
        displayName: 'Create NuGet Folder'

      - powershell: cd $(artifactPath); if ($?){echo "*.xml`r*.xsd`r*.csv`r*.dll`r*.pdb`r*.metadata`r*.p7s`r*.targets`r*.props`r*.json`r*.cache`r*.XML`r*.config`r.git`r*.nuget/`r.gitignore`r*.sln`r*.csproj`r*.cs`r*.yml`r*.bat`r*.proj`r*.md`r*.csproj`r*.txt`r*.nuspec`r*.snk`r*.resx`r" > .artifactignore}; if ($?){Get-Content .artifactignore} else{echo "error generation artifactignore file"; exit 1}
        displayName: 'add .artifactignore file'

## Action : Copy nupkg files
## Put "-Recurse" at the end of each copies if you also need to obtain dll, xml, ... files
## Don't forget to change in consequence .artifactignore file, a precedent task
      - powershell: |
          Copy-Item -Path $env:DotSpatial -Destination $(artifactPath)/DotSpatial;
          Copy-Item -Path $env:Fdo -Destination $(artifactPath)/Fdo;
          Copy-Item -Path $env:ProjNet -Destination $(artifactPath)/ProjNet;
          Copy-Item -Path $env:Library -Destination $(artifactPath)/Library;
          Copy-Item -Path $env:Services -Destination $(artifactPath)/Services;
          Copy-Item -Path $env:SharpMap -Destination $(artifactPath)/SharpMap;
          Copy-Item -Path $env:SqlServer2008R2 -Destination $(artifactPath)/SqlServer2008R2;
          Copy-Item -Path $env:SqlServer2012 -Destination $(artifactPath)/SqlServer2012;
          Copy-Item -Path $env:SqlServer2014 -Destination $(artifactPath)/SqlServer2014;
          Copy-Item -Path $env:SqlServer2016 -Destination $(artifactPath)/SqlServer2016;
        env:
          DotSpatial: '$(System.DefaultWorkingDirectory)/DotSpatial/bin/Release/*'
          Fdo: '$(System.DefaultWorkingDirectory)/Fdo/bin/Release/*'
          ProjNet : '$(System.DefaultWorkingDirectory)/ProjNet/bin/Release/*'
          Library: '$(System.DefaultWorkingDirectory)/Library/bin/Release/*'
          Services: '$(System.DefaultWorkingDirectory)/Services/bin/Release/*'
          SharpMap: '$(System.DefaultWorkingDirectory)/SharpMap/bin/Release/*'
          SqlServer2008R2: '$(System.DefaultWorkingDirectory)/SqlServer/2008R2/bin/Release/*'
          SqlServer2012: '$(System.DefaultWorkingDirectory)/SqlServer/2012/bin/Release/*'
          SqlServer2014: '$(System.DefaultWorkingDirectory)/SqlServer/2014/bin/Release/*'
          SqlServer2016: '$(System.DefaultWorkingDirectory)/SqlServer/2016/bin/Release/*'
        displayName: 'Copy NuGet Packages to NuGet folder'

## DEBUG
##      - powershell: tree /F
##        displayName: 'Display Environment - DEBUG'

      - task: PublishPipelineArtifact@1
        displayName: 'Generation NuGet artifacts'
        inputs:
          artifact: $(NuGetArtifactName)
          path: $(artifactPath)

## Need to run tests, before push artifacts and then publish
##  - job : 'GeoSikTests'
##    - task: VSTest@2
##      inputs:
##        platform: '$(buildPlatform)'
##        configuration: '$(buildConfiguration)'


## SECOND JOB ###

    - job: 'PublishNuGetPackage'
      dependsOn: GenerateNuGetPackages
      #dependsOn: GeoSikTests
      pool:
        vmImage: 'windows-2019'
      strategy:
        maxParallel: 3
        matrix:
          {
            GeoSik: { package: $(System.DefaultWorkingDirectory)/Library/GeoSik.*.nupkg },
            DotSpatial: { package: $(System.DefaultWorkingDirectory)/DotSpatial/GeoSik.DotSpatial.*.nupkg },
            Fdo: { package: $(System.DefaultWorkingDirectory)/Fdo/GeoSik.Fdo.*.nupkg },
            ProjNet: { package: $(System.DefaultWorkingDirectory)/ProjNet/GeoSik.ProjNet.*.nupkg },
            Services: { package: $(System.DefaultWorkingDirectory)/Services/GeoSik.Services.*.nupkg },
            SharpMap: { package: $(System.DefaultWorkingDirectory)/SharpMap/GeoSik.SharpMap.*.nupkg },
            SqlServer2008R2: { package: $(System.DefaultWorkingDirectory)/SqlServer2008R2/GeoSik.SqlServer.2008R2.*.nupkg },
            SqlServer2012: { package: $(System.DefaultWorkingDirectory)/SqlServer2012/GeoSik.SqlServer.2012.*.nupkg },
            SqlServer2014: { package: $(System.DefaultWorkingDirectory)/SqlServer2014/GeoSik.SqlServer.2014.*.nupkg },
            SqlServer2016: { package: $(System.DefaultWorkingDirectory)/SqlServer2016/GeoSik.SqlServer.2016.*.nupkg },
          }

      variables:
        solution: $(artifactPath)
        buildPlatform: 'Any CPU'
        buildConfiguration: 'Release'
  
      steps:

      - task: DownloadPipelineArtifact@2
        displayName: Recover NuGet packages Artifact
        inputs:
          buildType: 'current'
          artifactName: $(NuGetArtifactName)
          targetPath: $(System.DefaultWorkingDirectory)

      - task: NuGetCommand@2
        displayName: Publish NuGet packages to www.nuget.org
        inputs:
          command: 'push'
          packagesToPush: $(package)
          nuGetFeedType: 'external'
          publishFeedCredentials: 'NugetOrg_asIsogeo'
