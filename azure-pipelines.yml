# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

# CONDITIONS WHICH TRIGGER OR NOT THE JOBS
trigger:
  batch: true
  branches:
    include:
    - master
  tags:
    include:
    - "*"

pr:
- master

### GLOBAL VARIABLES ###

variables:

  ## ARTIFACTS CONFIGURATION ##
  nuGetsArtifactName: 'GeoSikNuGets'
  buildArtifactName : 'GeoSikBuild'
  buildIgnoredFiles: "*.xml`r*.xsd`r*.csv`r*.pdb`r*.metadata`r*.p7s`r*.targets`r*.props`r*.json`r*.cache`r*.XML`r*.config`r.git`r*.nuget/`r.gitignore`r*.sln`r*.csproj`r*.cs`r*.yml`r*.bat`r*.proj`r*.md`r*.csproj`r*.txt`r*.nuspec`r*.snk`r*.resx`r"
  nuGetIgnoredFiles: "*.xml`r*.xsd`r*.csv`r*.dll`r*.pdb`r*.metadata`r*.p7s`r*.targets`r*.props`r*.json`r*.cache`r*.XML`r*.config`r.git`r*.nuget/`r.gitignore`r*.sln`r*.csproj`r*.cs`r*.yml`r*.bat`r*.proj`r*.md`r*.csproj`r*.txt`r*.nuspec`r*.snk`r*.resx`r"
  #!Dont change it <-begin->
  artifactBuildPath: $(artifactDirLocation)\$(buildArtifactName)
  artifactNuGetPath: $(artifactDirLocation)\$(nuGetsArtifactName)
  #!Dont change it <-end-> 

  ## GENERAL CONFIGURATION ##
  solutionDir: $(System.DefaultWorkingDirectory)
  solution: 'GeoSik.dev.sln'
  nuGetFeedCredentials: 'NugetOrg_asIsogeo'
  artifactDirLocation: $(System.DefaultWorkingDirectory)
 
  ## BUILD CONFIGURATION ##
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  nugetVersion: '4.3.0' 
  vsVersion: '16.0'
  vsTestVersion: $(vsVersion)

  ## NUGET PACKAGES COMPILATION PATH ##
  DotSpatial: '/DotSpatial/bin/Release'
  Fdo: '/Fdo/bin/Release'
  ProjNet : '/ProjNet/bin/Release'
  Library: '/Library/bin/Release'
  Services: '/Services/bin/Release'
  SharpMap: '/SharpMap/bin/Release'
  SqlServer2008R2: '/SqlServer/2008R2/bin/Release'
  SqlServer2012: '/SqlServer/2012/bin/Release'
  SqlServer2014: '/SqlServer/2014/bin/Release'
  SqlServer2016: '/SqlServer/2016/bin/Release'

stages:

- stage: Build
  jobs:
  ## BUILD SOLUTION
  - job: 'BuildSolution'
    pool:
        vmImage: 'windows-2019'
    continueOnError: false
    variables:
      artifactName: $(buildArtifactName)
    steps:
      - task: NuGetToolInstaller@1
        inputs:
          versionSpec: $(nugetVersion)
        displayName: "Installation NuGet Configuration"
      - task: NuGetCommand@2
        displayName: 'Restore NuGet packages'
        inputs:
          restoreSolution: $(solutionDir)/$(solution)
          configuration: $(buildConfiguration)
      - task: VSBuild@1
        displayName: 'Compilation GeoSik solution'
        inputs:
          solution: $(solutionDir)/$(solution)
          vsVersion: $(vsVersion)
          msbuildArchitecture: x64
          msbuildArgs: '/p:PackageAsSingleFile=false /p:SkipInvalidConfigurations=true'
          platform: $(buildPlatform)
          configuration: $(buildConfiguration)
      - powershell: cd $(solutionDir); if ($?){echo $(buildIgnoredFiles) > .artifactignore}; if ($?){Get-Content .artifactignore} else{echo "error generation artifactignore file"; exit 1}
        displayName: 'add .artifactignore file'
      - task: PublishPipelineArtifact@1
        displayName: 'Storage compilation files'
        inputs:
          artifact: $(artifactName)
          path: $(System.DefaultWorkingDirectory)
  ## GENERATE NUGETS
  - job: 'GenerateNuGets'
    pool:
      vmImage: 'windows-2019'
    dependsOn: 'BuildSolution'
    continueOnError: false
    variables:
      artifactPath: $(artifactNuGetPath)
      artifactName: $(nuGetsArtifactName)
    steps:
    - powershell: new-item -ItemType directory -Force -Path $(artifactBuildPath)
      displayName: 'Create artifact folder'
    - task: DownloadPipelineArtifact@2
      displayName: Recover Build packages Artifact
      inputs:
        buildType: 'current'
        artifactName: $(buildArtifactName)
        targetPath: $(artifactBuildPath)
    - powershell: tree /F
      displayName: 'Display Environment - DEBUG'
    - task: NuGetCommand@2
      displayName: 'Generation NuGet packages'
      inputs:
        command: 'pack'
        configuration: $(buildConfiguration)
        packagesToPack: '$(artifactBuildPath)\**\*.csproj;!$(artifactBuildPath)\**\*.Tests.csproj'
    - powershell: new-item -ItemType directory -Force -Path $(artifactPath)
      displayName: 'Create artifact folder'
    - powershell: cd $(artifactPath); if ($?){echo $(nuGetIgnoredFiles) > .artifactignore}; if ($?){Get-Content .artifactignore} else{echo "error generation artifactignore file"; exit 1}
      displayName: 'add .artifactignore file'
    - powershell: tree /F
      displayName: 'Display Environment - DEBUG'
    - powershell: |
        Copy-Item -Force -Path $(artifactBuildPath)/$(DotSpatial)/* -Destination $(artifactPath)/$(DotSpatial);
        Copy-Item -Force -Path $(artifactBuildPath)/$(Fdo)/* -Destination $(artifactPath)/$(Fdo);
        Copy-Item -Force -Path $(artifactBuildPath)/$(ProjNet)/* -Destination $(artifactPath)/$(ProjNet);
        Copy-Item -Force -Path $(artifactBuildPath)/$(Library)/* -Destination $(artifactPath)/$(Library);
        Copy-Item -Force -Path $(artifactBuildPath)/$(Services)/* -Destination $(artifactPath)/$(Services);
        Copy-Item -Force -Path $(artifactBuildPath)/$(SharpMap)/* -Destination $(artifactPath)/$(SharpMap);
        Copy-Item -Force -Path $(artifactBuildPath)/$(SqlServer2008R2)/* -Destination $(artifactPath)/$(SqlServer2008R2);
        Copy-Item -Force -Path $(artifactBuildPath)/$(SqlServer2012)/* -Destination $(artifactPath)/$(SqlServer2012);
        Copy-Item -Force -Path $(artifactBuildPath)/$(SqlServer2014)/* -Destination $(artifactPath)/$(SqlServer2014);
        Copy-Item -Force -Path $(artifactBuildPath)/$(SqlServer2016)/* -Destination $(artifactPath)/$(SqlServer2016);
      displayName: 'Copy NuGet Packages to artifact folder'
    - task: PublishPipelineArtifact@1
      displayName: 'Storage NuGet artifacts'
      inputs:
        artifact: $(artifactName)
        path: $(artifactPath)

- stage: 'UnitTests'
  jobs:
  ## UNIT TESTS
  - job: 'RunUnitTests'
    pool:
        vmImage: 'windows-2019'
    continueOnError: false
    variables:
      artifactPath: $(artifactBuildPath)
      artifactName: $(buildArtifactName)
    steps:
    - powershell: new-item -ItemType directory -Force -Path $(artifactPath)
      displayName: 'Create Artifact folder'
    - task: DownloadPipelineArtifact@2
      displayName: Recover Build packages Artifact
      inputs:
        buildType: 'current'
        artifactName: $(artifactName)
        targetPath: $(artifactPath)  
    - powershell: tree /F
      displayName: 'Display Environment - DEBUG'
    - task: VSTest@2
      inputs:
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          **\*Tests.dll
          !**\*TestAdapter*.dll
          !**\obj\**
        searchFolder: $(artifactPath)
        vsTestVersion: $(vsTestVersion)
        configuration: $(buildConfiguration)
        platform: $(buildPlatform)
        codeCoverageEnabled: true

- stage: 'Publish'
  jobs:
    ## PUBLISH
    # todo : dont clean checkout at end of job
    - job: 'PublishNuGets'
      pool:
        vmImage: 'windows-2019'
      strategy:
        maxParallel: 2
        matrix:
          {
            GeoSik: { package: $(artifactPath)/$(Library)/GeoSik.*.nupkg}, 
            DotSpatial: { package: $(artifactPath)/$(DotSpatial)/GeoSik.DotSpatial.*.nupkg}, 
            Fdo: { package: $(artifactPath)/$(Fdo)/GeoSik.Fdo.*.nupkg}, 
            ProjNet: { package: $(artifactPath)/$(ProjNet)/GeoSik.ProjNet.*.nupkg},
            Services: { package: $(artifactPath)/$(Services)/GeoSik.Services.*.nupkg},
            SharpMap: { package: $(artifactPath)/$(SharpMap)/GeoSik.SharpMap.*.nupkg},
            SqlServer2008R2: { package: $(artifactPath)/$(SqlServer2008R2)/GeoSik.SqlServer.2008R2.*.nupkg},
            SqlServer2012: { package: $(artifactPath)/$(SqlServer2012)/GeoSik.SqlServer.2012.*.nupkg},
            SqlServer2014: { package: $(artifactPath)/$(SqlServer2014)/GeoSik.SqlServer.2014.*.nupkg},
            SqlServer2016: { package: $(artifactPath)/$(SqlServer2016)/GeoSik.SqlServer.2016.*.nupkg},
          }
      variables:
        artifactPath: $(artifactNuGetPath)
        artifactName: $(nuGetsArtifactName)
      steps:
      - powershell: new-item -ItemType directory -Force -Path $(artifactPath)
        displayName: 'Create artifact folder'
      - task: DownloadPipelineArtifact@2
        displayName: Recover NuGet packages Artifact
        inputs:
          buildType: 'current'
          artifactName: $(artifactName)
          targetPath: $(artifactPath)
      - task: NuGetCommand@2
        displayName: Publish NuGet packages to www.nuget.org
        inputs:
          command: 'push'
          packagesToPush: $(package)
          nuGetFeedType: 'external'
          publishFeedCredentials: $(nuGetFeedCredentials)
